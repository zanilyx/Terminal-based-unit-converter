Ultimate Unit Converter - Documentation
=====================================

This document provides a detailed explanation of the code structure, functions, and how everything works together.

1. Data Structures
-----------------

1.1 Unit Structure
    - name[32]: Name of the unit (e.g., "Meter", "Kilometer")
    - symbol[8]: Symbol of the unit (e.g., "m", "km")
    - factor: Conversion factor relative to base unit
    - category[32]: Category the unit belongs to (e.g., "Length", "Temperature")
    - is_temp: Boolean flag for temperature units (special handling)
    - aliases[MAX_ALIASES][16]: Alternative names/symbols for the unit
    - alias_count: Number of aliases defined
    - description[256]: Detailed description of the unit

1.2 ConversionEntry Structure
    - from[16]: Source unit
    - to[16]: Target unit
    - value: Original value
    - result: Converted value
    - timestamp: Time of conversion

1.3 UnitPrefix Structure
    - prefix: Prefix character (e.g., 'k', 'M', 'm')
    - factor: Multiplication factor for the prefix

2. Global Variables
------------------

- units[MAX_UNITS]: Array of all available units
- unit_count: Number of units defined
- history[MAX_HISTORY]: Array of conversion history entries
- history_count: Number of history entries
- categories[MAX_CATEGORIES]: Array of unit categories
- category_count: Number of categories defined

3. Core Functions
----------------

3.1 initialize_units()
    - Initializes all available units with their properties
    - Sets up conversion factors, aliases, and descriptions
    - Organizes units into categories
    - Called at program startup

3.2 convert_value(double value, const char *from, const char *to)
    - Main conversion function
    - Handles regular unit conversions using conversion factors
    - Special handling for temperature conversions
    - Returns converted value

3.3 convert_temperature(double value, const char *from, const char *to)
    - Special function for temperature conversions
    - Converts between Celsius, Fahrenheit, and Kelvin
    - Uses standard temperature conversion formulas

3.4 parse_value_with_prefix(const char *input, char *unit)
    - Parses input string containing value and unit
    - Handles unit prefixes (k, M, G, T, m, u, n, p, c, d, h)
    - Returns numeric value and extracts unit

4. User Interface Functions
--------------------------

4.1 show_main_menu()
    - Displays the main menu
    - Lists all available categories
    - Shows history, help, and quit options

4.2 show_category_menu(const char *category)
    - Shows available units in a category
    - Displays unit names, symbols, and descriptions

4.3 handle_conversion(const char *category)
    - Manages the conversion process
    - Gets input from user
    - Validates units
    - Performs conversion
    - Shows result
    - Adds to history

4.4 show_history()
    - Displays conversion history
    - Shows from/to units, values, and timestamps
    - Options to clear history or export to CSV

4.5 show_help()
    - Displays program features and usage tips
    - Explains available functionality

5. Utility Functions
-------------------

5.1 clear_screen()
    - Clears the terminal screen
    - Platform-independent implementation

5.2 print_header(const char *title)
    - Prints formatted header with title

5.3 get_clean_input(char *buffer, size_t size)
    - Gets user input and normalizes it
    - Removes newlines and trims whitespace

5.4 normalize_unit_name(char *unit)
    - Normalizes unit names for comparison
    - Handles case sensitivity
    - Preserves special cases (time units, etc.)

5.5 unit_exists(const char *unit, const char *category)
    - Checks if a unit exists in a category
    - Validates against unit symbols and aliases

5.6 format_number(double num, char *buffer, size_t size)
    - Formats numbers for display
    - Uses scientific notation for large/small numbers
    - Handles decimal places appropriately

6. File Operations
-----------------

6.1 save_history()
    - Saves conversion history to file
    - Uses HISTORY_FILE constant for filename

6.2 load_history()
    - Loads conversion history from file
    - Called at program startup

6.3 export_history_to_csv()
    - Exports conversion history to CSV format
    - Includes timestamps and all conversion details

7. Program Flow
--------------

1. Program starts in main()
2. Initializes units and loads history
3. Enters main loop:
   - Shows main menu
   - Gets user choice
   - Handles selected option
   - Continues until quit selected

8. Error Handling
----------------

- Input validation for units and values
- Error messages for invalid inputs
- Graceful handling of file operations
- Overflow protection for large numbers

9. Features
----------

- Multiple unit categories
- Unit prefix support
- Conversion history
- Scientific notation
- Unit aliases
- Temperature conversion
- Batch conversion
- Unit information display
- CSV export

10. Usage Tips
-------------

- Use unit symbols for input (e.g., "km" for kilometer)
- Temperature units: C, F, K
- Prefixes: k (kilo), M (mega), m (milli), etc.
- Batch mode for multiple conversions
- History for tracking past conversions 